// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package postgres

import (
	"context"
)

const addProduct = `-- name: AddProduct :one
INSERT INTO product (name, price, description, stock_quantity) 
VALUES ($1, $2, $3, $4) RETURNING id, name, price, description, stock_quantity
`

type AddProductParams struct {
	Name          string `json:"name"`
	Price         string `json:"price"`
	Description   string `json:"description"`
	StockQuantity int32  `json:"stock_quantity"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users (fullname, email, password)
VALUES ($1, $2, $3) RETURNING fullname, email, password, id
`

type AddUserParams struct {
	Fullname string `json:"fullname"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Fullname, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.Fullname,
		&i.Email,
		&i.Password,
		&i.ID,
	)
	return i, err
}

const deleteProductById = `-- name: DeleteProductById :one
DELETE FROM Product 
WHERE id=$1 RETURNING id, name, price, description, stock_quantity
`

func (q *Queries) DeleteProductById(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, price, description, stock_quantity FROM product WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, price, description, stock_quantity FROM product
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.StockQuantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductById = `-- name: UpdateProductById :one
UPDATE Product
SET 
    name = COALESCE($2, name),
    price = COALESCE($3, price),
    description = COALESCE($4, description),
    stock_quantity = COALESCE($5, stock_quantity)
WHERE
    id = $1 RETURNING id, name, price, description, stock_quantity
`

type UpdateProductByIdParams struct {
	ID            int32  `json:"id"`
	Name          string `json:"name"`
	Price         string `json:"price"`
	Description   string `json:"description"`
	StockQuantity int32  `json:"stock_quantity"`
}

func (q *Queries) UpdateProductById(ctx context.Context, arg UpdateProductByIdParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductById,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const validateCreds = `-- name: ValidateCreds :one
SELECT CASE
         WHEN EXISTS (SELECT 1 FROM users u WHERE u.email = $1 AND u.password = $2) THEN 1
         WHEN EXISTS (SELECT 1 FROM users v WHERE v.email = $1) THEN 0
         ELSE 2
       END AS Result
`

type ValidateCredsParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) ValidateCreds(ctx context.Context, arg ValidateCredsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, validateCreds, arg.Email, arg.Password)
	var result int32
	err := row.Scan(&result)
	return result, err
}
